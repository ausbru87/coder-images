name: Build and Push Images

on:
  push:
    branches:
      - main
    paths:
      - 'base/**'
      - 'datasci/**'
      - 'dev/**'
      - 'infra/**'
      - '.github/workflows/build-images.yml'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_USERNAME: ${{ github.repository_owner }}

permissions:
  contents: read
  packages: write

jobs:
  # Detect which files changed to determine which images to build
  changes:
    runs-on: ubuntu-latest
    # Required for pull requests
    permissions:
      pull-requests: read
    outputs:
      base: ${{ steps.filter.outputs.base }}
      datasci-python: ${{ steps.filter.outputs.datasci-python }}
      datasci-variants: ${{ steps.filter.outputs.datasci-variants }}
      dev-go: ${{ steps.filter.outputs.dev-go }}
      dev-rust: ${{ steps.filter.outputs.dev-rust }}
      dev-java: ${{ steps.filter.outputs.dev-java }}
      dev-cpp: ${{ steps.filter.outputs.dev-cpp }}
      dev-python: ${{ steps.filter.outputs.dev-python }}
      infra-devops: ${{ steps.filter.outputs.infra-devops }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            base:
              - 'base/**'
            datasci-python:
              - 'base/**'
              - 'datasci/python/**'
            datasci-variants:
              - 'base/**'
              - 'datasci/python/**'
              - 'datasci/pytorch/**'
              - 'datasci/tensorflow/**'
              - 'datasci/ml/**'
            dev-go:
              - 'base/**'
              - 'dev/go/**'
            dev-rust:
              - 'base/**'
              - 'dev/rust/**'
            dev-java:
              - 'base/**'
              - 'dev/java/**'
            dev-cpp:
              - 'base/**'
              - 'dev/cpp/**'
            dev-python:
              - 'base/**'
              - 'dev/python/**'
            infra-devops:
              - 'base/**'
              - 'infra/devops/**'

  build-base-images:
    needs: changes
    if: ${{ needs.changes.outputs.base == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
        include:
          - variant: ubuntu
            version: "24.04"
          - variant: ubi9
            version: "9.6"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push base-${{ matrix.variant }} image
        uses: docker/build-push-action@v5
        with:
          context: ./base
          file: ./base/${{ matrix.variant }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:${{ matrix.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:latest
          cache-from: type=gha,scope=base-${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=base-${{ matrix.variant }}
          platforms: linux/amd64

  # Build datasci-python (depends on respective base images)
  build-datasci-python:
    needs: [changes, build-base-images]
    if: ${{ always() && (needs.changes.outputs.datasci-python == 'true' || github.event_name == 'workflow_dispatch') && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
        include:
          - variant: ubuntu
            version: "24.04"
          - variant: ubi9
            version: "9.6"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push datasci-python-${{ matrix.variant }} image
        uses: docker/build-push-action@v5
        with:
          context: ./datasci/python
          file: ./datasci/python/${{ matrix.variant }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-datasci-python-${{ matrix.variant }}:${{ matrix.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-datasci-python-${{ matrix.variant }}:latest
          cache-from: type=gha,scope=datasci-python-${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=datasci-python-${{ matrix.variant }}
          platforms: linux/amd64

  # Build other datasci images per variant (depend on datasci-python)
  build-datasci-variants:
    needs: [changes, build-datasci-python]
    if: ${{ always() && (needs.changes.outputs.datasci-variants == 'true' || github.event_name == 'workflow_dispatch') && (needs.build-datasci-python.result == 'success' || needs.build-datasci-python.result == 'skipped') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
        type: [pytorch, tensorflow, ml]
        include:
          - variant: ubuntu
            version: "24.04"
          - variant: ubi9
            version: "9.6"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push datasci-${{ matrix.type }}-${{ matrix.variant }} image
        uses: docker/build-push-action@v5
        with:
          context: ./datasci/${{ matrix.type }}
          file: ./datasci/${{ matrix.type }}/${{ matrix.variant }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-datasci-${{ matrix.type }}-${{ matrix.variant }}:${{ matrix.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-datasci-${{ matrix.type }}-${{ matrix.variant }}:latest
          cache-from: type=gha,scope=datasci-${{ matrix.type }}-${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=datasci-${{ matrix.type }}-${{ matrix.variant }}
          platforms: linux/amd64

  # Build dev-go images (depend on base)
  build-dev-go:
    needs: [changes, build-base-images]
    if: ${{ always() && (needs.changes.outputs.dev-go == 'true' || github.event_name == 'workflow_dispatch') && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
        include:
          - variant: ubuntu
            version: "24.04"
          - variant: ubi9
            version: "9.6"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dev-go-${{ matrix.variant }} image
        uses: docker/build-push-action@v5
        with:
          context: ./dev/go
          file: ./dev/go/${{ matrix.variant }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-dev-go-${{ matrix.variant }}:${{ matrix.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-dev-go-${{ matrix.variant }}:latest
          cache-from: type=gha,scope=dev-go-${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=dev-go-${{ matrix.variant }}
          platforms: linux/amd64

  # Build dev-rust images (depend on base)
  build-dev-rust:
    needs: [changes, build-base-images]
    if: ${{ always() && (needs.changes.outputs.dev-rust == 'true' || github.event_name == 'workflow_dispatch') && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
        include:
          - variant: ubuntu
            version: "24.04"
          - variant: ubi9
            version: "9.6"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dev-rust-${{ matrix.variant }} image
        uses: docker/build-push-action@v5
        with:
          context: ./dev/rust
          file: ./dev/rust/${{ matrix.variant }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-dev-rust-${{ matrix.variant }}:${{ matrix.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-dev-rust-${{ matrix.variant }}:latest
          cache-from: type=gha,scope=dev-rust-${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=dev-rust-${{ matrix.variant }}
          platforms: linux/amd64

  # Build dev-java images (depend on base)
  build-dev-java:
    needs: [changes, build-base-images]
    if: ${{ always() && (needs.changes.outputs.dev-java == 'true' || github.event_name == 'workflow_dispatch') && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
        include:
          - variant: ubuntu
            version: "24.04"
          - variant: ubi9
            version: "9.6"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dev-java-${{ matrix.variant }} image
        uses: docker/build-push-action@v5
        with:
          context: ./dev/java
          file: ./dev/java/${{ matrix.variant }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-dev-java-${{ matrix.variant }}:${{ matrix.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-dev-java-${{ matrix.variant }}:latest
          cache-from: type=gha,scope=dev-java-${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=dev-java-${{ matrix.variant }}
          platforms: linux/amd64

  # Build dev-cpp images (depend on base)
  build-dev-cpp:
    needs: [changes, build-base-images]
    if: ${{ always() && (needs.changes.outputs.dev-cpp == 'true' || github.event_name == 'workflow_dispatch') && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
        include:
          - variant: ubuntu
            version: "24.04"
          - variant: ubi9
            version: "9.6"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dev-cpp-${{ matrix.variant }} image
        uses: docker/build-push-action@v5
        with:
          context: ./dev/cpp
          file: ./dev/cpp/${{ matrix.variant }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-dev-cpp-${{ matrix.variant }}:${{ matrix.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-dev-cpp-${{ matrix.variant }}:latest
          cache-from: type=gha,scope=dev-cpp-${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=dev-cpp-${{ matrix.variant }}
          platforms: linux/amd64

  # Build dev-python images (depend on base)
  build-dev-python:
    needs: [changes, build-base-images]
    if: ${{ always() && (needs.changes.outputs.dev-python == 'true' || github.event_name == 'workflow_dispatch') && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
        include:
          - variant: ubuntu
            version: "24.04"
          - variant: ubi9
            version: "9.6"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dev-python-${{ matrix.variant }} image
        uses: docker/build-push-action@v5
        with:
          context: ./dev/python
          file: ./dev/python/${{ matrix.variant }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-dev-python-${{ matrix.variant }}:${{ matrix.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-dev-python-${{ matrix.variant }}:latest
          cache-from: type=gha,scope=dev-python-${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=dev-python-${{ matrix.variant }}
          platforms: linux/amd64

  # Build infra-devops images (depend on base)
  build-infra-devops:
    needs: [changes, build-base-images]
    if: ${{ always() && (needs.changes.outputs.infra-devops == 'true' || github.event_name == 'workflow_dispatch') && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
        include:
          - variant: ubuntu
            version: "24.04"
          - variant: ubi9
            version: "9.6"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push infra-devops-${{ matrix.variant }} image
        uses: docker/build-push-action@v5
        with:
          context: ./infra/devops
          file: ./infra/devops/${{ matrix.variant }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-infra-devops-${{ matrix.variant }}:${{ matrix.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-infra-devops-${{ matrix.variant }}:latest
          cache-from: type=gha,scope=infra-devops-${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=infra-devops-${{ matrix.variant }}
          platforms: linux/amd64
