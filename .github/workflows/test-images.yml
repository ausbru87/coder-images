name: Test Images

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_USERNAME: ${{ github.repository_owner }}

permissions:
  contents: read
  packages: read

jobs:
  test-base:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build base image for ${{ matrix.arch }}
        run: |
          cd base
          docker build --platform linux/${{ matrix.arch }} -f ${{ matrix.variant }}.Dockerfile -t test-base-${{ matrix.variant }}-${{ matrix.arch }} .

      - name: Test base image on ${{ matrix.arch }}
        run: |
          # Test that coder user exists
          docker run --platform linux/${{ matrix.arch }} --rm test-base-${{ matrix.variant }}-${{ matrix.arch }} id coder

          # Test that coder has sudo access
          docker run --platform linux/${{ matrix.arch }} --rm test-base-${{ matrix.variant }}-${{ matrix.arch }} sudo echo "sudo works"

          # Test essential tools
          docker run --platform linux/${{ matrix.arch }} --rm test-base-${{ matrix.variant }}-${{ matrix.arch }} which git
          docker run --platform linux/${{ matrix.arch }} --rm test-base-${{ matrix.variant }}-${{ matrix.arch }} which curl
          docker run --platform linux/${{ matrix.arch }} --rm test-base-${{ matrix.variant }}-${{ matrix.arch }} which wget
          docker run --platform linux/${{ matrix.arch }} --rm test-base-${{ matrix.variant }}-${{ matrix.arch }} which vim

  test-datasci-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build base image
        run: |
          cd base
          docker build -f ${{ matrix.variant }}.Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:latest .

      - name: Build datasci-python image
        run: |
          cd datasci/python
          docker build -f ${{ matrix.variant }}.Dockerfile -t test-datasci-python-${{ matrix.variant }} .

      - name: Test datasci-python image
        run: |
          # Test Python
          docker run --rm test-datasci-python-${{ matrix.variant }} python3 --version

          # Test pip packages
          docker run --rm test-datasci-python-${{ matrix.variant }} python3 -c "import numpy; print(numpy.__version__)"
          docker run --rm test-datasci-python-${{ matrix.variant }} python3 -c "import pandas; print(pandas.__version__)"
          docker run --rm test-datasci-python-${{ matrix.variant }} python3 -c "import scipy; print(scipy.__version__)"
          docker run --rm test-datasci-python-${{ matrix.variant }} python3 -c "import matplotlib; print(matplotlib.__version__)"
          docker run --rm test-datasci-python-${{ matrix.variant }} python3 -c "import jupyter; print('jupyter ok')"

          # Test Jupyter
          docker run --rm test-datasci-python-${{ matrix.variant }} jupyter --version

  test-dev-go:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build base image
        run: |
          cd base
          docker build -f ${{ matrix.variant }}.Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:latest .

      - name: Build dev-go image
        run: |
          cd dev/go
          docker build -f ${{ matrix.variant }}.Dockerfile -t test-dev-go-${{ matrix.variant }} .

      - name: Test dev-go image
        run: |
          # Test Go
          docker run --rm test-dev-go-${{ matrix.variant }} go version

          # Test Go tools
          docker run --rm test-dev-go-${{ matrix.variant }} which gopls
          docker run --rm test-dev-go-${{ matrix.variant }} which dlv

  test-dev-rust:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build base image
        run: |
          cd base
          docker build -f ${{ matrix.variant }}.Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:latest .

      - name: Build dev-rust image
        run: |
          cd dev/rust
          docker build -f ${{ matrix.variant }}.Dockerfile -t test-dev-rust-${{ matrix.variant }} .

      - name: Test dev-rust image
        run: |
          # Test Rust
          docker run --rm test-dev-rust-${{ matrix.variant }} rustc --version
          docker run --rm test-dev-rust-${{ matrix.variant }} cargo --version

          # Test Rust tools
          docker run --rm test-dev-rust-${{ matrix.variant }} cargo fmt --version
          docker run --rm test-dev-rust-${{ matrix.variant }} cargo clippy --version

  test-infra-k8s:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build base image
        run: |
          cd base
          docker build -f ${{ matrix.variant }}.Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:latest .

      - name: Build infra-k8s image
        run: |
          cd infra/k8s
          docker build -f ${{ matrix.variant }}.Dockerfile -t test-infra-k8s-${{ matrix.variant }} .

      - name: Test infra-k8s image
        run: |
          # Test Kubernetes tools
          docker run --rm test-infra-k8s-${{ matrix.variant }} kubectl version --client
          docker run --rm test-infra-k8s-${{ matrix.variant }} helm version
          docker run --rm test-infra-k8s-${{ matrix.variant }} k9s version
          docker run --rm test-infra-k8s-${{ matrix.variant }} which kubectx
          docker run --rm test-infra-k8s-${{ matrix.variant }} which kubens
          docker run --rm test-infra-k8s-${{ matrix.variant }} kustomize version

  test-infra-terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build base image
        run: |
          cd base
          docker build -f ${{ matrix.variant }}.Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:latest .

      - name: Build infra-terraform image
        run: |
          cd infra/terraform
          docker build -f ${{ matrix.variant }}.Dockerfile -t test-infra-terraform-${{ matrix.variant }} .

      - name: Test infra-terraform image
        run: |
          # Test IaC tools
          docker run --rm test-infra-terraform-${{ matrix.variant }} terraform version
          docker run --rm test-infra-terraform-${{ matrix.variant }} tofu version
          docker run --rm test-infra-terraform-${{ matrix.variant }} terragrunt --version
          docker run --rm test-infra-terraform-${{ matrix.variant }} tflint --version
          docker run --rm test-infra-terraform-${{ matrix.variant }} tfsec --version

  test-infra-ansible:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build base image
        run: |
          cd base
          docker build -f ${{ matrix.variant }}.Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:latest .

      - name: Build infra-ansible image
        run: |
          cd infra/ansible
          docker build -f ${{ matrix.variant }}.Dockerfile -t test-infra-ansible-${{ matrix.variant }} .

      - name: Test infra-ansible image
        run: |
          # Test Ansible installation
          docker run --rm test-infra-ansible-${{ matrix.variant }} ansible --version
          docker run --rm test-infra-ansible-${{ matrix.variant }} ansible-lint --version

          # Test SSH tools
          docker run --rm test-infra-ansible-${{ matrix.variant }} which sshpass
          docker run --rm test-infra-ansible-${{ matrix.variant }} which ssh

          # Test Python packages
          docker run --rm test-infra-ansible-${{ matrix.variant }} python3 -c "import jmespath; print('jmespath ok')"
          docker run --rm test-infra-ansible-${{ matrix.variant }} python3 -c "import netaddr; print('netaddr ok')"
          docker run --rm test-infra-ansible-${{ matrix.variant }} python3 -c "import paramiko; print('paramiko ok')"

  test-infra-cloud:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build base image
        run: |
          cd base
          docker build -f ${{ matrix.variant }}.Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:latest .

      - name: Build infra-cloud image
        run: |
          cd infra/cloud
          docker build -f ${{ matrix.variant }}.Dockerfile -t test-infra-cloud-${{ matrix.variant }} .

      - name: Test infra-cloud image
        run: |
          # Test AWS CLI
          docker run --rm test-infra-cloud-${{ matrix.variant }} aws --version
          
          # Test GCloud CLI
          docker run --rm test-infra-cloud-${{ matrix.variant }} gcloud --version
          
          # Test Azure CLI
          docker run --rm test-infra-cloud-${{ matrix.variant }} az --version
          
          # Test additional tools
          docker run --rm test-infra-cloud-${{ matrix.variant }} python3 -c "import boto3; print('boto3 ok')"

  test-dev-java:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build base image
        run: |
          cd base
          docker build -f ${{ matrix.variant }}.Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:latest .

      - name: Build dev-java image
        run: |
          cd dev/java
          docker build -f ${{ matrix.variant }}.Dockerfile -t test-dev-java-${{ matrix.variant }} .

      - name: Test dev-java image
        run: |
          # Test Java installation
          docker run --rm test-dev-java-${{ matrix.variant }} java --version
          docker run --rm test-dev-java-${{ matrix.variant }} javac --version

          # Test Maven
          docker run --rm test-dev-java-${{ matrix.variant }} mvn --version

          # Test Gradle
          docker run --rm test-dev-java-${{ matrix.variant }} gradle --version

  test-dev-cpp:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build base image
        run: |
          cd base
          docker build -f ${{ matrix.variant }}.Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:latest .

      - name: Build dev-cpp image
        run: |
          cd dev/cpp
          docker build -f ${{ matrix.variant }}.Dockerfile -t test-dev-cpp-${{ matrix.variant }} .

      - name: Test dev-cpp image
        run: |
          # Test C++ compilers
          docker run --rm test-dev-cpp-${{ matrix.variant }} gcc --version
          docker run --rm test-dev-cpp-${{ matrix.variant }} g++ --version
          docker run --rm test-dev-cpp-${{ matrix.variant }} clang --version

          # Test build tools
          docker run --rm test-dev-cpp-${{ matrix.variant }} cmake --version
          docker run --rm test-dev-cpp-${{ matrix.variant }} ninja --version

          # Test debuggers
          docker run --rm test-dev-cpp-${{ matrix.variant }} gdb --version
          docker run --rm test-dev-cpp-${{ matrix.variant }} which clangd

  test-dev-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ubuntu, ubi9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build base image
        run: |
          cd base
          docker build -f ${{ matrix.variant }}.Dockerfile -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/coder-base-${{ matrix.variant }}:latest .

      - name: Build dev-python image
        run: |
          cd dev/python
          docker build -f ${{ matrix.variant }}.Dockerfile -t test-dev-python-${{ matrix.variant }} .

      - name: Test dev-python image
        run: |
          # Test Python installation
          docker run --rm test-dev-python-${{ matrix.variant }} python3 --version
          docker run --rm test-dev-python-${{ matrix.variant }} pip3 --version

          # Test Python tools
          docker run --rm test-dev-python-${{ matrix.variant }} black --version
          docker run --rm test-dev-python-${{ matrix.variant }} flake8 --version
          docker run --rm test-dev-python-${{ matrix.variant }} pylint --version
          docker run --rm test-dev-python-${{ matrix.variant }} mypy --version
          docker run --rm test-dev-python-${{ matrix.variant }} pytest --version

          # Test Python packages
          docker run --rm test-dev-python-${{ matrix.variant }} python3 -c "import requests; print('requests ok')"
